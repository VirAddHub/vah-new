name: Backend E2E Tests

on:
  push:
    branches: [main]
    paths:
      - 'apps/backend/**'
  pull_request:
    branches: [main]
    paths:
      - 'apps/backend/**'

jobs:
  e2e:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres # pragma: allowlist secret
          POSTGRES_DB: vah_test # pragma: allowlist secret
        ports: ['5432:5432']
        options: >-
          --health-cmd="pg_isready -U postgres -d vah_test"
          --health-interval=5s --health-timeout=5s --health-retries=10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --include=dev
        working-directory: apps/backend

      - name: Build backend
        run: npm run build
        working-directory: apps/backend

      - name: Setup test database
        run: |
          # Create test user and database
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE ROLE test WITH LOGIN PASSWORD 'test';" || true # pragma: allowlist secret
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE test OWNER test;" || true # pragma: allowlist secret

      - name: Start API server
        env:
          PORT: 3001
          NODE_ENV: test
          DATABASE_URL: postgres://test:test@localhost:5432/test # pragma: allowlist secret
          POSTMARK_TOKEN: dummy
          POSTMARK_STREAM: outbound
          EMAIL_FROM: hello@virtualaddresshub.co.uk
          EMAIL_FROM_NAME: VirtualAddressHub
          EMAIL_REPLY_TO: support@virtualaddresshub.co.uk
          DISABLE_RATE_LIMIT_FOR_HEALTHZ: 1
        run: |
          node dist/server/index.js &
          echo $! > server.pid
        working-directory: apps/backend

      - name: Wait for server readiness
        run: |
          for i in {1..60}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3001/api/healthz || true)
            if [ "$code" = "200" ]; then echo "Server is healthy!"; exit 0; fi
            echo "Waiting for server... (attempt $i/60)"
            sleep 1
          done
          echo "Server not healthy after 60 seconds"; exit 1

      - name: Run E2E tests
        run: E2E_BASE_URL=http://localhost:3001 npm run test:e2e
        working-directory: apps/backend

      - name: Stop server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi