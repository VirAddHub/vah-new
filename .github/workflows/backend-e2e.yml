name: Backend E2E Tests

on:
  push:
    branches: [main]
    paths:
      - 'apps/backend/**'
  pull_request:
    branches: [main]
    paths:
      - 'apps/backend/**'

jobs:
  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres # pragma: allowlist secret
          POSTGRES_DB: vah_test # pragma: allowlist secret
        ports: ['5432:5432']
        options: >-
          --health-cmd="pg_isready -U postgres -d vah_test"
          --health-interval=5s --health-timeout=5s --health-retries=10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --include=dev
        working-directory: apps/backend

      - name: Build backend
        run: npm run build
        working-directory: apps/backend

      - name: Setup test database
        run: |
          # Create test user and database
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE ROLE test WITH LOGIN PASSWORD 'test';" || true # pragma: allowlist secret
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE test OWNER test;" || true # pragma: allowlist secret

      - name: Start API server
        env:
          PORT: 3001
          NODE_ENV: test
          DATABASE_URL: postgres://test:test@localhost:5432/test # pragma: allowlist secret
          POSTMARK_TOKEN: dummy
          POSTMARK_STREAM: outbound
          EMAIL_FROM: hello@virtualaddresshub.co.uk
          EMAIL_FROM_NAME: VirtualAddressHub
          EMAIL_REPLY_TO: support@virtualaddresshub.co.uk
          DISABLE_RATE_LIMIT_FOR_HEALTHZ: 1
        run: |
          node dist/server/index.js &
          echo $! > server.pid
        working-directory: apps/backend

      - name: Wait for local server to be healthy
        run: |
          set -euo pipefail
          BASE="http://localhost:3001"
          PATH="/api/healthz"
          MAX=600          # 10 minutes
          SLEEP=2
          start=$(date +%s)
          attempt=0
          while :; do
            attempt=$((attempt+1))
            code=$(curl -sS -m 5 --connect-timeout 3 -o /dev/null -w "%{http_code}" "$BASE$PATH" || echo 000)
            if [ "$code" = "200" ] || [ "$code" = "204" ]; then
              echo "✅ healthy ($code) after $(( $(date +%s) - start ))s ($attempt attempts)"
              break
            fi
            case "$code" in 000|429|500|502|503|504) ;; *) echo "❌ non-retryable $code"; exit 1 ;; esac
            elapsed=$(( $(date +%s) - start ))
            if [ "$elapsed" -ge "$MAX" ]; then
              echo "❌ never became healthy (last $code) after ${elapsed}s"
              exit 1
            fi
            backoff=$(( SLEEP << (attempt-1) ))
            [ "$backoff" -gt 15 ] && backoff=15
            echo "⏳ attempt $attempt: $code. retrying in ${backoff}s (elapsed ${elapsed}s / ${MAX}s)"
            sleep "$backoff"
          done

      - name: Run E2E tests
        env:
          E2E_BASE_URL: http://localhost:3001
        run: npm run test:e2e
        working-directory: apps/backend

      - name: Stop server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi